extend type Mutation {
  """
  ✨ Insert a single `Article` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  article_insert(
    """
    Data object to insert into the table.
    """
    data: Article_Data!
  ): Article_KeyOutput! @fdc_generated(from: "Article", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `FactSet` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  factSet_insert(
    """
    Data object to insert into the table.
    """
    data: FactSet_Data!
  ): FactSet_KeyOutput! @fdc_generated(from: "FactSet", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Story` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  story_insert(
    """
    Data object to insert into the table.
    """
    data: Story_Data!
  ): Story_KeyOutput! @fdc_generated(from: "Story", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `StoryStatus` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  storyStatus_insert(
    """
    Data object to insert into the table.
    """
    data: StoryStatus_Data!
  ): StoryStatus_KeyOutput! @fdc_generated(from: "StoryStatus", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Article` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  article_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Article_Data!]!
  ): [Article_KeyOutput!]! @fdc_generated(from: "Article", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `FactSet` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  factSet_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [FactSet_Data!]!
  ): [FactSet_KeyOutput!]! @fdc_generated(from: "FactSet", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Story` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  story_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Story_Data!]!
  ): [Story_KeyOutput!]! @fdc_generated(from: "Story", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `StoryStatus` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  storyStatus_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [StoryStatus_Data!]!
  ): [StoryStatus_KeyOutput!]! @fdc_generated(from: "StoryStatus", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Article` into the table, based on the primary key. Returns the key of the newly inserted `Article`.
  """
  article_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Article_Data!
  ): Article_KeyOutput! @fdc_generated(from: "Article", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `FactSet` into the table, based on the primary key. Returns the key of the newly inserted `FactSet`.
  """
  factSet_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: FactSet_Data!
  ): FactSet_KeyOutput! @fdc_generated(from: "FactSet", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Story` into the table, based on the primary key. Returns the key of the newly inserted `Story`.
  """
  story_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Story_Data!
  ): Story_KeyOutput! @fdc_generated(from: "Story", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `StoryStatus` into the table, based on the primary key. Returns the key of the newly inserted `StoryStatus`.
  """
  storyStatus_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: StoryStatus_Data!
  ): StoryStatus_KeyOutput! @fdc_generated(from: "StoryStatus", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Update a single `Article` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  article_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Article_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Article_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Article_Data!
  ): Article_KeyOutput @fdc_generated(from: "Article", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `FactSet` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  factSet_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: FactSet_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: FactSet_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: FactSet_Data!
  ): FactSet_KeyOutput @fdc_generated(from: "FactSet", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Story` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  story_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Story_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Story_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Story_Data!
  ): Story_KeyOutput @fdc_generated(from: "Story", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `StoryStatus` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  storyStatus_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: StoryStatus_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: StoryStatus_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: StoryStatus_Data!
  ): StoryStatus_KeyOutput @fdc_generated(from: "StoryStatus", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Article` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  article_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Article_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Article_Data!
  ): Int! @fdc_generated(from: "Article", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `FactSet` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  factSet_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: FactSet_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: FactSet_Data!
  ): Int! @fdc_generated(from: "FactSet", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Story` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  story_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Story_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Story_Data!
  ): Int! @fdc_generated(from: "Story", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `StoryStatus` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  storyStatus_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: StoryStatus_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: StoryStatus_Data!
  ): Int! @fdc_generated(from: "StoryStatus", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Article` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  article_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Article_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Article_FirstRow
  ): Article_KeyOutput @fdc_generated(from: "Article", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `FactSet` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  factSet_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: FactSet_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: FactSet_FirstRow
  ): FactSet_KeyOutput @fdc_generated(from: "FactSet", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Story` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  story_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Story_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Story_FirstRow
  ): Story_KeyOutput @fdc_generated(from: "Story", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `StoryStatus` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  storyStatus_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: StoryStatus_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: StoryStatus_FirstRow
  ): StoryStatus_KeyOutput @fdc_generated(from: "StoryStatus", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Article` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  article_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Article_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Article", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `FactSet` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  factSet_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: FactSet_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "FactSet", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Story` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  story_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Story_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Story", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `StoryStatus` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  storyStatus_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: StoryStatus_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "StoryStatus", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
